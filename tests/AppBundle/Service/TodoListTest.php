<?php

class TodoListTest extends \Tests\BaseKernelTestCase
{

    /**
     * @var \AppBundle\Service\TodoListService $service
     */
    private $service;
    private $em;
    private $completedItem;
    private $incompletedItem;
    private $currentSemester;
    private $department;
    private $itemWithShortDeadline;
    private $itemWithAlmostShortDeadline;
    private $itemPastDeadline;
    private $itemMandatoryShortDeadline;
    private $itemMandatory;


    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $kernel = $this->createKernel();
        $kernel->boot();

        $service = $kernel->getContainer()->get('app.todo_list_service');
        $this->service = $service;
        $em = $kernel->getContainer()->get('doctrine')->getManager();
        $this->em = $em;
        $todoRepo = $em->getRepository('AppBundle:TodoItem');
        $this->completedItem = $todoRepo->findOneBy(['title' => 'completedTodoItem']);
        $this->incompletedItem = $todoRepo->findOneBy(['title' => 'incompletedTodoItem']);
        $this->currentSemester = $em->getRepository('AppBundle:Semester')->findCurrentSemester();
        $this->department = $em->getRepository('AppBundle:Department')->findOneBy(['shortName' => 'NTNU']);

        $this->itemWithShortDeadline = $todoRepo->findOneBy(['title' => 'shortDeadlineItem']);
        $this->itemWithAlmostShortDeadline = $todoRepo->findOneBy(['title' => 'almostShortDeadlineItem']);
        $this->itemPastDeadline = $todoRepo->findOneBy(['title' => 'pastDeadlineItem']);
        $this->itemMandatoryShortDeadline = $todoRepo->findOneBy(['title' => 'mandatoryShortDeadlineItem']);
        $this->itemMandatory = $todoRepo->findOneBy(['title' => 'mandatoryTodoItem']);


    }


    //testGetIncompleted?
    function testIsCompletedInSemesterByDepartment()
    {
        $todoItems = array($this->completedItem, $this->incompletedItem);
        $incompletedItems = $this->service->getIncompletedTodoItems($todoItems, $this->currentSemester, $this->department);
        $this->assertEquals(1, count($incompletedItems));
        $this->assertEquals($this->incompletedItem, $incompletedItems[0]);

    }

    function testGetTodoItemsWithShortDeadline()
    {
        $todoItems = array($this->itemWithShortDeadline, $this->incompletedItem, $this->itemWithAlmostShortDeadline, $this->itemPastDeadline);
        $shortDeadlines = $this->service->getTodoItemsWithShortDeadline($todoItems);
        $this->assertEquals(2, count($shortDeadlines));
        $this->assertContains($this->itemWithShortDeadline, $shortDeadlines);
        $this->assertContains($this->itemPastDeadline, $shortDeadlines);
    }


    function testGetMandatoryTodoItemsWithInsignificantDeadline()
    {
        $itemMandatoryShortDeadline = $this->itemMandatoryShortDeadline;
        $itemMandatoryNoShortDeadline = $this->itemMandatory;
        $itemShortDeadline = $this->itemWithShortDeadline;
        $itemNotMandatoryNoDeadline = $this->incompletedItem;
        $mandatoryResult = $this->service->getMandatoryTodoItemsWithInsignificantDeadline(
            array($itemMandatoryShortDeadline, $itemMandatoryNoShortDeadline, $itemShortDeadline, $itemNotMandatoryNoDeadline), $this->currentSemester);
        $this->assertEquals(1, count($mandatoryResult));
        $this->assertContains($itemMandatoryNoShortDeadline, $mandatoryResult);
        $nonMandatoryResult = $this->service->getNonMandatoryTodoItemsWithInsignificantDeadline(
            array($itemMandatoryShortDeadline, $itemMandatoryNoShortDeadline, $itemShortDeadline, $itemNotMandatoryNoDeadline),
            $this->currentSemester);
        $this->assertEquals(1, count($nonMandatoryResult));
        $this->assertContains($itemNotMandatoryNoDeadline, $nonMandatoryResult);

    }


    function deleteTest()
    {
        //Sjekk slett, s√• status
    }


}
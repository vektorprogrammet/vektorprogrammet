<?php
use AppBundle\Entity\TodoItem;

class TodoListTest extends \Tests\BaseKernelTestCase
{

    /**
     * @var \AppBundle\Service\TodoListService $service
     */
    private $service;

    /**
     * @var \Doctrine\ORM\EntityManager
     */
    private $em;

    /**
     * @var \AppBundle\Entity\TodoCompleted
     */
    private $completedItem;

    /**
     * @var \AppBundle\Entity\Semester
     */
    private $currentSemester;

    /**
     * @var \AppBundle\Entity\Department
     */
    private $department;

    /**
     * @var TodoItem
     */
    private $incompletedItem;
    private $itemWithShortDeadline;
    private $itemWithAlmostShortDeadline;
    private $itemPastDeadline;
    private $itemMandatoryShortDeadline;
    private $itemMandatory;
    private $itemDeleted;

    /**
     * @var \AppBundle\Entity\Repository\TodoItemRepository
     */
    private $todoRepo;


    /**
     *
     */
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $kernel = $this->createKernel();
        $kernel->boot();

        $service = $kernel->getContainer()->get(\AppBundle\Service\TodoListService::class);
        $this->service = $service;
        $em = $kernel->getContainer()->get('doctrine')->getManager();
        $this->em = $em;
        $todoRepo = $em->getRepository('AppBundle:TodoItem');
        $this->completedItem = $todoRepo->findOneBy(['title' => 'completedTodoItem']);
        $this->incompletedItem = $todoRepo->findOneBy(['title' => 'incompletedTodoItem']);
        $this->currentSemester = $em->getRepository('AppBundle:Semester')->findCurrentSemester();
        $this->department = $em->getRepository('AppBundle:Department')->findOneBy(['shortName' => 'NTNU']);

        $this->itemWithShortDeadline = $todoRepo->findOneBy(['title' => 'shortDeadlineItem']);
        $this->itemWithAlmostShortDeadline = $todoRepo->findOneBy(['title' => 'almostShortDeadlineItem']);
        $this->itemPastDeadline = $todoRepo->findOneBy(['title' => 'pastDeadlineItem']);
        $this->itemMandatoryShortDeadline = $todoRepo->findOneBy(['title' => 'mandatoryShortDeadlineItem']);
        $this->itemMandatory = $todoRepo->findOneBy(['title' => 'mandatoryTodoItem']);
        $this->itemDeleted = $todoRepo->findOneBy(['title' => 'itemToBeDeleted']);
        $this->todoRepo = $todoRepo;

    }

    /**
     *
     */
    function testIsCompletedInSemesterByDepartment()
    {
        $todoItems = array($this->completedItem, $this->incompletedItem);
        $incompletedItems = $this->service->getIncompletedTodoItems($todoItems, $this->currentSemester, $this->department);
        $this->assertEquals(1, count($incompletedItems));
        $this->assertEquals($this->incompletedItem, $incompletedItems[0]);

    }

    /**
     *
     */
    function testGetTodoItemsWithShortDeadline()
    {
        $todoItems = array($this->itemWithShortDeadline, $this->incompletedItem, $this->itemWithAlmostShortDeadline, $this->itemPastDeadline);
        $shortDeadlines = $this->service->getTodoItemsWithShortDeadline($todoItems);
        $this->assertEquals(2, count($shortDeadlines));
        $this->assertContains($this->itemWithShortDeadline, $shortDeadlines);
        $this->assertContains($this->itemPastDeadline, $shortDeadlines);
    }

    /**
     *
     */
    function testGetMandatoryTodoItemsWithInsignificantDeadline()
    {
        $itemMandatoryShortDeadline = $this->itemMandatoryShortDeadline;
        $itemMandatoryNoShortDeadline = $this->itemMandatory;
        $itemShortDeadline = $this->itemWithShortDeadline;
        $itemNotMandatoryNoDeadline = $this->incompletedItem;
        $mandatoryResult = $this->service->getMandatoryTodoItemsWithInsignificantDeadline(
            array($itemMandatoryShortDeadline, $itemMandatoryNoShortDeadline, $itemShortDeadline, $itemNotMandatoryNoDeadline), $this->currentSemester);
        $this->assertEquals(1, count($mandatoryResult));
        $this->assertContains($itemMandatoryNoShortDeadline, $mandatoryResult);
        $nonMandatoryResult = $this->service->getNonMandatoryTodoItemsWithInsignificantDeadline(
            array($itemMandatoryShortDeadline, $itemMandatoryNoShortDeadline, $itemShortDeadline, $itemNotMandatoryNoDeadline),
            $this->currentSemester);
        $this->assertEquals(1, count($nonMandatoryResult));
        $this->assertContains($itemNotMandatoryNoDeadline, $nonMandatoryResult);

    }


    /**
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    function testToggleCompletedItem()
    {
       $incompletedItem = $this->incompletedItem;
       $this->assertFalse($incompletedItem->isCompletedInSemesterByDepartment($this->currentSemester, $this->department));
       $this->service->toggleCompletedItem($incompletedItem,$this->currentSemester, $this->department);
       $updatedItem = $this->todoRepo->find($incompletedItem->getId());
       $this->assertEquals($updatedItem->getId(), $incompletedItem->getId());
       $this->assertTrue($updatedItem->isCompletedInSemesterByDepartment($this->currentSemester, $this->department));
    }

    //TODO: create tests for generateEntities (edit item) and deleteItem
    /*function testGenerateEntities()
    {

    }

    function testDeleteItem()
    {

    }
    */
}
<?php

namespace AppBundle\Entity\Repository;

use DateTime;
use Doctrine\ORM\EntityRepository;

/**
 * ArticleRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    /**
     * Finds articles ordered descending by date created.
     *
     * @param null $limit
     * @param null $excludeId
     *
     * @return array
     */
    public function findLatestArticles($limit = null, $excludeId = null)
    {
        $qb = $this->createQueryBuilder('a')
                   ->select('a')
                   ->where('a.published = true')
                   ->addOrderBy('a.created', 'DESC');

        if (false === is_null($excludeId)) {
            $qb->andWhere('a.id != :article_id')
               ->setParameter('article_id', $excludeId);
        }

        if (false === is_null($limit)) {
            $qb->setMaxResults($limit);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Finds articles for the given department.
     *
     * @param null $limit
     * @param null $department
     *
     * @return array
     */
    public function findLatestArticlesByDepartment($department, $limit = null)
    {
        $qb = $this->createQueryBuilder('a')
                   ->select('a')
                   ->join('a.departments', 'd')
                   ->where('d.id = :department_id')
                   ->andWhere('a.published = true')
                   ->addOrderBy('a.created', 'DESC')
                   ->setParameter('department_id', $department);

        if (false === is_null($limit)) {
            $qb->setMaxResults($limit);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Finds articles ordered descending by sticky, then date.
     * This causes the method to return only sticky articles if
     * the limit is lower than the number of sticky articles, but it includes
     * the latest articles if the limit is higher.
     *
     * @param $limit
     *
     * @return array
     */
    public function findStickyAndLatestArticles($limit = null)
    {
        // Get news that are newer than 30 days
        $d = new DateTime();
        $d->modify('-30days');

        $qb = $this->createQueryBuilder('a')
                   ->select('a')
                   ->where('a.published = true')
                   ->andWhere('a.created > :date')
                   ->orWhere('a.sticky = 1')
                   ->andWhere('a.published = true')
                   ->addOrderBy('a.sticky', 'DESC')
                   ->addOrderBy('a.created', 'DESC')
                   ->setParameter('date', $d);

        if (false === is_null($limit)) {
            $qb->setMaxResults($limit);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Finds slugs.
     *
     * @return array
     */
    public function findSlugs()
    {
        $qb = $this->createQueryBuilder('a')
            ->select('a.slug');
        $temp = $qb->getQuery()->getResult();
        $slugs = [];
        foreach ($temp as $slug) {
            array_push($slugs, $slug['slug']);
        }
        return $slugs;
    }

    /* The methods below return a QueryBuilder instance, to be used with knp_paginator bundle. */

    /**
     * Finds all articles ordered descending by date created.
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function findAllArticles()
    {
        return $this->createQueryBuilder('a')
                    ->select('a')
                    ->addOrderBy('a.created', 'DESC');
    }

    public function findAllPublishedArticles()
    {
        return $this->createQueryBuilder('a')
                    ->select('a')
                    ->where('a.published = true')
                    ->addOrderBy('a.created', 'DESC');
    }

    /**
     * Finds all articles for the given departments ordered descending by date created.
     * Also includes articles which belong to no specific department (meaning it is for all departments).
     *
     * @param $departments
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function findAllArticlesByDepartments($departments)
    {
        return $this->createQueryBuilder('a')
                    ->select('a')
                    ->addOrderBy('a.created', 'DESC')
                    ->leftJoin('a.departments', 'd')
                    ->where('a.published = true')
                    ->andWhere('d.shortName IN (:department_sns)')
                    ->orWhere('SIZE(a.departments) = 0')
                    ->andWhere('a.published = true')
                    ->setParameter('department_sns', $departments);
    }
}

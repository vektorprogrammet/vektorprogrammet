<?php

namespace AppBundle\Entity\Repository;

use AppBundle\Entity\Department;
use AppBundle\Entity\Semester;
use AppBundle\Entity\User;
use Doctrine\ORM\EntityRepository;

/**
 * AdmissionRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdmissionRepository extends EntityRepository
{
    /**
     * Finds all applications that have a conducted interview.
     *
     * @param null $department
     * @param null $semester
     *
     * @return array
     */
    public function findInterviewedApplicants($department = null, $semester = null)
    {
        $qb = $this->createQueryBuilder('a')
            ->select('a')
            ->join('a.statistic', 'stat')
            ->join('stat.semester', 'sem')
            ->join('sem.department', 'd')
            ->join('a.interview', 'i')
            ->where('i.interviewed = 1');

        if (null !== $department) {
            $qb->andWhere('d = :department')
                ->setParameter('department', $department);
        }

        if (null !== $semester) {
            $qb->andWhere('sem = :semester')
                ->setParameter('semester', $semester);
        }
        $qb->orderBy('a.userCreated', 'ASC');

        return $qb->getQuery()->getResult();
    }

    /**
     * Finds all applications that have a conducted interview.
     *
     * @param Department $department
     * @param Semester   $semester
     * @param User       $interviewer
     *
     * @return array
     */
    public function findInterviewedApplicantsByInterviewer($department, $semester, $interviewer)
    {
        $qb = $this->createQueryBuilder('a')
            ->select('a')
            ->join('a.statistic', 'stat')
            ->join('stat.semester', 'sem')
            ->join('sem.department', 'd')
            ->join('a.interview', 'i')
            ->where('i.interviewed = 1')
            ->andWhere('i.interviewer = :interviewer')
            ->setParameter('interviewer', $interviewer);

        if (null !== $department) {
            $qb->andWhere('d = :department')
                ->setParameter('department', $department);
        }

        if (null !== $semester) {
            $qb->andWhere('sem = :semester')
                ->setParameter('semester', $semester);
        }
        $qb->orderBy('a.userCreated', 'ASC');

        return $qb->getQuery()->getResult();
    }

    /**
     * Finds all applications that have been assigned an interview that has not yet been conducted.
     *
     * @param null $department
     * @param null $semester
     *
     * @return array
     */
    public function findAssignedApplicants($department = null, $semester = null)
    {
        $qb = $this->createQueryBuilder('a')
            ->select('a')
            ->join('a.statistic', 'stat')
            ->join('stat.semester', 'sem')
            ->join('sem.department', 'd')
            ->join('a.interview', 'i')
            ->where('i.interviewed = 0');

        if (null !== $department) {
            $qb->andWhere('d = :department')
                ->setParameter('department', $department);
        }

        if (null !== $semester) {
            $qb->andWhere('sem = :semester')
                ->setParameter('semester', $semester);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Finds all applications without an interview, or without a conducted interview.
     *
     * @param null $department
     * @param null $semester
     *
     * @return array
     */
    public function findNewApplicants($department = null, $semester = null)
    {
        $qb = $this->createQueryBuilder('a')
            ->select('a')
            ->join('a.statistic', 'stat')
            ->join('stat.semester', 'sem')
            ->join('sem.department', 'd')
            ->leftJoin('a.interview', 'i')
            ->where('i.interviewed = 0')
            ->orWhere('i is NULL');

        if (null !== $department) {
            $qb->andWhere('d = :department')
                ->setParameter('department', $department);
        }

        if (null !== $semester) {
            $qb->andWhere('sem = :semester')
                ->setParameter('semester', $semester);
        }

        return $qb->getQuery()->getResult();
    }

    public function findApplicantById($id)
    {
        return $this->createQueryBuilder('Application')
            ->select('Application')
            ->where('Application.id = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getSingleResult();
    }

    public function findApplicantStatisticById($id)
    {
        return $this->createQueryBuilder('ApplicationStatistic')
            ->select('ApplicationStatistic')
            ->where('ApplicationStatistic.id = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getSingleResult();
    }

    public function numOfApplications()
    {
        return $this->createQueryBuilder('ApplicationStatistic')
            ->select('count(ApplicationStatistic.id)')
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function numOfSemesters()
    {
        return $this->createQueryBuilder('ApplicationStatistic')
            ->select('count(ApplicationStatistic.semester)')
            ->distinct()
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function numOfSemester($semester)
    {
        return $this->createQueryBuilder('ApplicationStatistic')
            ->select('count(ApplicationStatistic.semester)')
            ->where('ApplicationStatistic.semester = :semester')
            ->setParameter('semester', $semester)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function numOfGender($gender)
    {
        return $this->createQueryBuilder('ApplicationStatistic')
            ->select('count(ApplicationStatistic.gender)')
            ->where('ApplicationStatistic.gender = :gender')
            ->setParameter('gender', $gender)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function numOfPreviousParticipation($participated)
    {
        return $this->createQueryBuilder('ApplicationStatistic')
            ->select('count(ApplicationStatistic.gender)')
            ->where('ApplicationStatistic.previousParticipation = :participated')
            ->setParameter('participated', $participated)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function numOfAccepted($accepted)
    {
        return $this->createQueryBuilder('ApplicationStatistic')
            ->select('count(ApplicationStatistic.accepted)')
            ->where('ApplicationStatistic.accepted = :accepted')
            ->setParameter('accepted', $accepted)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function numOfYearOfStudy($yearOfStudy)
    {
        return $this->createQueryBuilder('ApplicationStatistic')
            ->select('count(ApplicationStatistic.yearOfStudy)')
            ->where('ApplicationStatistic.yearOfStudy = :yearOfStudy')
            ->setParameter('yearOfStudy', $yearOfStudy)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function numOfFieldOfStudy($fieldOfStudy)
    {
        return $this->createQueryBuilder('ApplicationStatistic')
            ->select('count(ApplicationStatistic.fieldOfStudy)')
            ->where('ApplicationStatistic.fieldOfStudy = :fieldOfStudy')
            ->setParameter('fieldOfStudy', $fieldOfStudy)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function numOfDepartment($department)
    {
        $numUsers = $this->getEntityManager()->createQuery('

		SELECT COUNT (AppS.id)
		FROM AppBundle:ApplicationStatistic AppS
		JOIN AppS.semester s
		JOIN s.department d
		WHERE d.id = :department

		')
            ->setParameter('department', $department)
            ->getSingleScalarResult();

        return $numUsers;
    }
}
